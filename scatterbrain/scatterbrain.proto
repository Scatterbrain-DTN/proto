syntax = "proto3";
package scatterbrain;
/*
 * Common messages between all protocols
 */

// Generic status response with optional error code
message Ack {
    bool success = 1;
    int32 status = 2;
    oneof ack_maybe_message {
        string text = 3;
    }
}

/*
 * Scatterbrain DTN protocol
 *
 * used for p2p networking between scattebrain routers
 * currently bluetooth and wifi direct
*/

enum MessageType {
    // p2p types
    ADVERTISE = 0;
    DECLARE_HASHES = 1;
    BLOCK_HEADER = 2;
    BLOCK_SEQUENCE = 3;
    ELECT_LEADER = 4;
    UPGRADE = 5;
    ROUTING_METADATA = 6;
    IP_ANNOUNCE = 7;
    IDENTITY = 8;
    LUID = 9;
    JUST_UKES = 10;
    ACK = 11;
    INVALID = 12;
    MESHTASTIC_ANNOUNCE = 13;
    MESHTASTIC_ANNOUNCE_ACK = 14;
    MESHTASTIC_ANNOUNCE_SYNACK = 15;
    MESHTASTIC_ERR = 16;
    MESHTASTIC_MERKLE = 17;
    MESHTASTIC_STREAM = 18;


    // desktop types
    GET_MESSAGE = 51;
    GET_IDENTITY = 52;
    SEND_MESSAGE = 53;
    MESSAGE = 54;
    UNIT_RESPONSE = 55;
    CRYPTO_MESSAGE = 56;
    PAIRING_REQUEST = 57;
    PAIRING_INITIATE = 58;
    PAIRING_COMPLETED = 59;
    PAIRING_ACK = 60;
    IDENTITY_RESPONSE = 61;
    API_IDENTITY = 62;
    MESSAGE_RESPONSE = 63;
    API_HEADER = 64;
    GENERATE_IDENTITY = 65;
    IMPORT_IDENTITY = 66;
    IMPORT_IDENTITY_RESPONSE = 67;
    GENERATE_IDENTITY_RESPONSE = 68;
    GET_EVENTS = 69;
    DESKTOP_EVENTS = 70;
    DESKTOP_EVENT = 71;
    NO_BODY_MESSAGE = 72;
    PAIRING_SYNACK = 73;
}

message TypePrefix {
    MessageType message_type = 1;
}
